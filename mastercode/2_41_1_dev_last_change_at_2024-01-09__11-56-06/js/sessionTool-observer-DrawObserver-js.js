(window.webpackJsonp=window.webpackJsonp||[]).push([[500],{4063:function(d,T,_){var f=Object.create,l=Object.defineProperty,v=Object.getOwnPropertyDescriptor,O=Object.getOwnPropertyNames,y=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty,b=(e,r)=>{for(var t in r)l(e,t,{get:r[t],enumerable:!0})},c=(e,r,t,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let a of O(r))!h.call(e,a)&&a!==t&&l(e,a,{get:()=>r[a],enumerable:!(o=v(r,a))||o.enumerable});return e},D=(e,r,t)=>(t=e!=null?f(y(e)):{},c(r||!e||!e.__esModule?l(t,"default",{value:e,enumerable:!0}):t,e)),P=e=>c(l({},"__esModule",{value:!0}),e),p=(e,r,t)=>new Promise((o,a)=>{var N=n=>{try{u(t.next(n))}catch(i){a(i)}},J=n=>{try{u(t.throw(n))}catch(i){a(i)}},u=n=>n.done?o(n.value):Promise.resolve(n.value).then(N,J);u((t=t.apply(e,r)).next())}),w={};b(w,{register:()=>g}),d.exports=P(w);var s=D(_(7));function g(e){e.dispatch("Tools/SessionTool/register",{key:"DrawTool",getter:S,setter:j})}function S(){return p(this,null,function*(){let e;s.default.commit("Tools/Draw/setDownloadSelectedFormat","GEOJSON"),s.default.dispatch("Tools/Draw/setDownloadFeatures"),yield s.default.dispatch("Tools/Draw/prepareData");try{e=JSON.parse(s.default.getters["Tools/Draw/download"].dataString)}catch(r){console.warn('jsonParse failed: could not parse"'+e+'" to JSON: '+r)}return{draw:e}})}function j(e){return p(this,null,function*(){var r,t,o;if(!Array.isArray((r=e?.draw)==null?void 0:r.features)||!((o=(t=e?.draw)==null?void 0:t.features)!=null&&o.length))return;const a=yield s.default.dispatch("Maps/addNewLayerIfNotExists","importDrawLayer",{root:!0});s.default.dispatch("Tools/FileImport/importGeoJSON",{raw:JSON.stringify(e.draw),layer:a,filename:"draw.geojson"})})}}}]);
