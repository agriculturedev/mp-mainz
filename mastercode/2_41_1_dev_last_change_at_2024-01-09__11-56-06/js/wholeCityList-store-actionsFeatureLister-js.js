(window.webpackJsonp=window.webpackJsonp||[]).push([[589],{3857:function(L,j,h){var w=Object.create,n=Object.defineProperty,F=Object.getOwnPropertyDescriptor,O=Object.getOwnPropertyNames,v=Object.getPrototypeOf,c=Object.prototype.hasOwnProperty,_=(e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})},f=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of O(t))!c.call(e,a)&&a!==r&&n(e,a,{get:()=>t[a],enumerable:!(o=F(t,a))||o.enumerable});return e},P=(e,t,r)=>(r=e!=null?w(v(e)):{},f(t||!e||!e.__esModule?n(r,"default",{value:e,enumerable:!0}):r,e)),b=e=>f(n({},"__esModule",{value:!0}),e),p={};_(p,{default:()=>M}),L.exports=b(p);var d=P(h(60)),T=h(5),M={switchToList({state:e,rootGetters:t,commit:r},o){r("setLayer",o),e.layer&&(r("setLayerId",o.id),r("setGfiFeaturesOfLayer",t["Maps/getVisibleLayerList"]),r("setFeatureCount",e.gfiFeaturesOfLayer.length),r("setShownFeatures",e.gfiFeaturesOfLayer.length<e.maxFeatures?e.gfiFeaturesOfLayer.length:e.maxFeatures),r("setLayerListView",!1),r("setFeatureDetailView",!1),r("setFeatureListView",!0))},clickOnFeature({state:e,commit:t,dispatch:r},o){if(o!==""&&o>=0&&o<=e.shownFeatures){const a=e.gfiFeaturesOfLayer[o],i=e.rawFeaturesOfLayer[o].getGeometry(),s=e.layer.geometryType.toLowerCase().indexOf("polygon")>-1?e.highlightVectorRulesPolygon:e.highlightVectorRulesPointLine;t("setSelectedFeature",a),r("switchToDetails"),s&&s.zoomLevel&&i&&typeof i.getType=="function"&&(i.getType()==="Point"?r("Maps/setCenter",i.getCoordinates(),{root:!0}):r("Maps/setCenter",(0,T.getCenter)(i.getExtent()),{root:!0}),r("Maps/setZoomLevel",s.zoomLevel,{root:!0}))}},hoverOverFeature({state:e,dispatch:t},r){if(r!==""&&r>=0&&r<=e.shownFeatures){const o=e.nestedFeatures?e.rawFeaturesOfLayer[r]:e.layer.features[r];t("highlightFeature",o.getId())}},highlightFeature({state:e,rootGetters:t,dispatch:r},o){var a;r("Maps/removeHighlightFeature","decrease",{root:!0});let i="";const s=t["Maps/getVisibleLayerList"].find(g=>g.values_.id===e.layer.id),V=e.nestedFeatures?e.rawFeaturesOfLayer:s.getSource().getFeatures(),C=V.find(g=>(i=g.getGeometry().getType(),g.getId().toString()===o)),y=d.default.getLayerWhere({id:e.layer.id}),l=e.layer.geometryType.toLowerCase().indexOf("polygon")>-1?e.highlightVectorRulesPolygon:e.highlightVectorRulesPointLine,u={type:i==="Point"||i==="MultiPoint"?"increase":"highlightPolygon",id:o,layer:s,feature:C,scale:(a=l.image)==null?void 0:a.scale};i==="LineString"&&(u.type="highlightLine"),s.id=e.layer.id,l.zoomLevel&&(u.zoomLevel=l.zoomLevel),y&&y.styleId&&(u.styleId=y.styleId),u.highlightStyle={fill:l.fill,stroke:l.stroke,image:l.image},r("Maps/highlightFeature",u,{root:!0})},switchToThemes({commit:e}){e("resetToThemeChooser")},switchToDetails({state:e,commit:t}){e.selectedFeature&&(t("setLayerListView",!1),t("setFeatureListView",!1),t("setFeatureDetailView",!0))},showMore({state:e,commit:t}){const r=e.shownFeatures<e.featureCount-10?e.shownFeatures+10:e.featureCount;t("setShownFeatures",r)}}}}]);
