(window.webpackJsonp=window.webpackJsonp||[]).push([[412],{3888:function(N,X,S){var C=Object.create,G=Object.defineProperty,D=Object.getOwnPropertyDescriptor,J=Object.getOwnPropertyNames,$=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty,B=(f,v,g,L)=>{if(v&&typeof v=="object"||typeof v=="function")for(let h of J(v))!A.call(f,h)&&h!==g&&G(f,h,{get:()=>v[h],enumerable:!(L=D(v,h))||L.enumerable});return f},O=(f,v,g)=>(g=f!=null?C($(f)):{},B(v||!f||!f.__esModule?G(g,"default",{value:f,enumerable:!0}):g,f)),p=O(S(4676)),m=S(4158),T=O(S(450)),R=O(S(97)),U=O(S(18));function F(f,v=1){if(!(0,U.default)(f)||!(f instanceof R.default))return console.error(`addons/cosi/utils/geometry/simplify: The first parameter must be an instance of ol/geom/Geometry, but got ${typeof f}`),!1;if(typeof v!="number")return console.error(`addons/cosi/utils/geometry/simplify: The second parameter must be a number, but got ${typeof v}`),!1;if(f.getType()==="Point")return f;let g;if(f.getType()==="Polygon")g=(0,m.polygon)(f.getCoordinates());else if(f.getType()==="MultiPolygon")g=(0,m.multiPolygon)(f.getCoordinates());else return console.error(`addons/cosi/utils/geometry/simplify: The instance of the given geometry (${f}) is not supported`),!1;const L=new T.default,h=(0,p.default)(g,{tolerance:v});return L.readGeometry(h.geometry)}N.exports={simplify:F}},4177:function(N,X,S){var C=Object.defineProperty,G=Object.getOwnPropertyDescriptor,D=Object.getOwnPropertyNames,J=Object.prototype.hasOwnProperty,$=(n,r)=>{for(var t in r)C(n,t,{get:r[t],enumerable:!0})},A=(n,r,t,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of D(r))!J.call(n,o)&&o!==t&&C(n,o,{get:()=>r[o],enumerable:!(e=G(r,o))||e.enumerable});return n},B=n=>A(C({},"__esModule",{value:!0}),n),O={};$(O,{coordAll:()=>v,coordEach:()=>m,coordReduce:()=>T,featureEach:()=>F,featureReduce:()=>f,findPoint:()=>q,findSegment:()=>W,flattenEach:()=>h,flattenReduce:()=>K,geomEach:()=>g,geomReduce:()=>L,lineEach:()=>V,lineReduce:()=>Z,propEach:()=>R,propReduce:()=>U,segmentEach:()=>Q,segmentReduce:()=>Y}),N.exports=B(O);var p=S(4158);function m(n,r,t){if(n!==null)for(var e,o,i,l,s,a,u,y=0,c=0,w,b=n.type,P=b==="FeatureCollection",E=b==="Feature",z=P?n.features.length:1,_=0;_<z;_++){u=P?n.features[_].geometry:E?n.geometry:n,w=u?u.type==="GeometryCollection":!1,s=w?u.geometries.length:1;for(var H=0;H<s;H++){var d=0,k=0;if(l=w?u.geometries[H]:u,l!==null){a=l.coordinates;var M=l.type;switch(y=t&&(M==="Polygon"||M==="MultiPolygon")?1:0,M){case null:break;case"Point":if(r(a,c,_,d,k)===!1)return!1;c++,d++;break;case"LineString":case"MultiPoint":for(e=0;e<a.length;e++){if(r(a[e],c,_,d,k)===!1)return!1;c++,M==="MultiPoint"&&d++}M==="LineString"&&d++;break;case"Polygon":case"MultiLineString":for(e=0;e<a.length;e++){for(o=0;o<a[e].length-y;o++){if(r(a[e][o],c,_,d,k)===!1)return!1;c++}M==="MultiLineString"&&d++,M==="Polygon"&&k++}M==="Polygon"&&d++;break;case"MultiPolygon":for(e=0;e<a.length;e++){for(k=0,o=0;o<a[e].length;o++){for(i=0;i<a[e][o].length-y;i++){if(r(a[e][o][i],c,_,d,k)===!1)return!1;c++}k++}d++}break;case"GeometryCollection":for(e=0;e<l.geometries.length;e++)if(m(l.geometries[e],r,t)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function T(n,r,t,e){var o=t;return m(n,function(i,l,s,a,u){l===0&&t===void 0?o=i:o=r(o,i,l,s,a,u)},e),o}function R(n,r){var t;switch(n.type){case"FeatureCollection":for(t=0;t<n.features.length&&r(n.features[t].properties,t)!==!1;t++);break;case"Feature":r(n.properties,0);break}}function U(n,r,t){var e=t;return R(n,function(o,i){i===0&&t===void 0?e=o:e=r(e,o,i)}),e}function F(n,r){if(n.type==="Feature")r(n,0);else if(n.type==="FeatureCollection")for(var t=0;t<n.features.length&&r(n.features[t],t)!==!1;t++);}function f(n,r,t){var e=t;return F(n,function(o,i){i===0&&t===void 0?e=o:e=r(e,o,i)}),e}function v(n){var r=[];return m(n,function(t){r.push(t)}),r}function g(n,r){var t,e,o,i,l,s,a,u,y,c,w=0,b=n.type==="FeatureCollection",P=n.type==="Feature",E=b?n.features.length:1;for(t=0;t<E;t++){for(s=b?n.features[t].geometry:P?n.geometry:n,u=b?n.features[t].properties:P?n.properties:{},y=b?n.features[t].bbox:P?n.bbox:void 0,c=b?n.features[t].id:P?n.id:void 0,a=s?s.type==="GeometryCollection":!1,l=a?s.geometries.length:1,o=0;o<l;o++){if(i=a?s.geometries[o]:s,i===null){if(r(null,w,u,y,c)===!1)return!1;continue}switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(r(i,w,u,y,c)===!1)return!1;break}case"GeometryCollection":{for(e=0;e<i.geometries.length;e++)if(r(i.geometries[e],w,u,y,c)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}w++}}function L(n,r,t){var e=t;return g(n,function(o,i,l,s,a){i===0&&t===void 0?e=o:e=r(e,o,i,l,s,a)}),e}function h(n,r){g(n,function(t,e,o,i,l){var s=t===null?null:t.type;switch(s){case null:case"Point":case"LineString":case"Polygon":return r((0,p.feature)(t,o,{bbox:i,id:l}),e,0)===!1?!1:void 0}var a;switch(s){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon";break}for(var u=0;u<t.coordinates.length;u++){var y=t.coordinates[u],c={type:a,coordinates:y};if(r((0,p.feature)(c,o),e,u)===!1)return!1}})}function K(n,r,t){var e=t;return h(n,function(o,i,l){i===0&&l===0&&t===void 0?e=o:e=r(e,o,i,l)}),e}function Q(n,r){h(n,function(t,e,o){var i=0;if(t.geometry){var l=t.geometry.type;if(!(l==="Point"||l==="MultiPoint")){var s,a=0,u=0,y=0;if(m(t,function(c,w,b,P,E){if(s===void 0||e>a||P>u||E>y){s=c,a=e,u=P,y=E,i=0;return}var z=(0,p.lineString)([s,c],t.properties);if(r(z,e,o,E,i)===!1)return!1;i++,s=c})===!1)return!1}}})}function Y(n,r,t){var e=t,o=!1;return Q(n,function(i,l,s,a,u){o===!1&&t===void 0?e=i:e=r(e,i,l,s,a,u),o=!0}),e}function V(n,r){if(!n)throw new Error("geojson is required");h(n,function(t,e,o){if(t.geometry!==null){var i=t.geometry.type,l=t.geometry.coordinates;switch(i){case"LineString":if(r(t,e,o,0,0)===!1)return!1;break;case"Polygon":for(var s=0;s<l.length;s++)if(r((0,p.lineString)(l[s],t.properties),e,o,s)===!1)return!1;break}}})}function Z(n,r,t){var e=t;return V(n,function(o,i,l,s){i===0&&t===void 0?e=o:e=r(e,o,i,l,s)}),e}function W(n,r){if(r=r||{},!(0,p.isObject)(r))throw new Error("options is invalid");var t=r.featureIndex||0,e=r.multiFeatureIndex||0,o=r.geometryIndex||0,i=r.segmentIndex||0,l=r.properties,s;switch(n.type){case"FeatureCollection":t<0&&(t=n.features.length+t),l=l||n.features[t].properties,s=n.features[t].geometry;break;case"Feature":l=l||n.properties,s=n.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":s=n;break;default:throw new Error("geojson is invalid")}if(s===null)return null;var a=s.coordinates;switch(s.type){case"Point":case"MultiPoint":return null;case"LineString":return i<0&&(i=a.length+i-1),(0,p.lineString)([a[i],a[i+1]],l,r);case"Polygon":return o<0&&(o=a.length+o),i<0&&(i=a[o].length+i-1),(0,p.lineString)([a[o][i],a[o][i+1]],l,r);case"MultiLineString":return e<0&&(e=a.length+e),i<0&&(i=a[e].length+i-1),(0,p.lineString)([a[e][i],a[e][i+1]],l,r);case"MultiPolygon":return e<0&&(e=a.length+e),o<0&&(o=a[e].length+o),i<0&&(i=a[e][o].length-i-1),(0,p.lineString)([a[e][o][i],a[e][o][i+1]],l,r)}throw new Error("geojson is invalid")}function q(n,r){if(r=r||{},!(0,p.isObject)(r))throw new Error("options is invalid");var t=r.featureIndex||0,e=r.multiFeatureIndex||0,o=r.geometryIndex||0,i=r.coordIndex||0,l=r.properties,s;switch(n.type){case"FeatureCollection":t<0&&(t=n.features.length+t),l=l||n.features[t].properties,s=n.features[t].geometry;break;case"Feature":l=l||n.properties,s=n.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":s=n;break;default:throw new Error("geojson is invalid")}if(s===null)return null;var a=s.coordinates;switch(s.type){case"Point":return(0,p.point)(a,l,r);case"MultiPoint":return e<0&&(e=a.length+e),(0,p.point)(a[e],l,r);case"LineString":return i<0&&(i=a.length+i),(0,p.point)(a[i],l,r);case"Polygon":return o<0&&(o=a.length+o),i<0&&(i=a[o].length+i),(0,p.point)(a[o][i],l,r);case"MultiLineString":return e<0&&(e=a.length+e),i<0&&(i=a[e].length+i),(0,p.point)(a[e][i],l,r);case"MultiPolygon":return e<0&&(e=a.length+e),o<0&&(o=a[e].length+o),i<0&&(i=a[e][o].length-i),(0,p.point)(a[e][o][i],l,r)}throw new Error("geojson is invalid")}}}]);
